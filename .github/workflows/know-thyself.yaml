name: know thyself
on:
  workflow_call:
jobs:
  workflow-context:
    runs-on: ubuntu-latest
    steps:
      - name: Generate job UUID
        shell: bash
        run: |
          echo "JOB_UUID=$(python3 -c 'from uuid import uuid4; print(uuid4())')" | tee -a "$GITHUB_ENV"

      - name: ${{ env.JOB_UUID }}
        shell: bash
        run: |
          echo "Job UUID: $JOB_UUID"

      - name: Get job ID
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          job_id="$(mktemp -t job-id-XXXXXX)"
          attempt=0

          while [[ $((attempt++)) -le 10 ]]; do
            # Find the previous job step by its unique name, regardless of
            # other unrelated jobs using the same workflow.
            curl -fsSL https://api.github.com/repos/"$GITHUB_REPOSITORY"/actions/runs/"$GITHUB_RUN_ID"/jobs \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
              | jq -r '.jobs | map(select(.steps | map(select(.name == env.JOB_UUID)) | length != 0)) | .[0].id | values' \
              > "$job_id"

            # We got a job id, so we're done.
            [[ -s "$job_id" ]] && break

            # Retry in 1s
            sleep 1
          done

          if [[ ! -s "$job_id" ]]; then
            echo "Failed to find job id" >&2
            exit 1
          fi

          echo "GITHUB_JOB_ID=$(< "$job_id")" | tee -a "$GITHUB_ENV"

      - name: Get workflow ref and SHA
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          job_logs="$(mktemp -t job-logs-XXXXXX)"

          curl -fsSL https://api.github.com/repos/"$GITHUB_REPOSITORY"/actions/jobs/"$GITHUB_JOB_ID"/logs \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            > "$job_logs"

          # Example of what we're grepping:
          #
          #   2023-05-31T22:31:19.5944795Z Requested labels: ubuntu-latest
          #   2023-05-31T22:31:19.5945111Z Job defined at: tsibley/github-actions-testing/.github/workflows/know-thyself.yaml@refs/heads/master
          #   2023-05-31T22:31:19.5945353Z Reusable workflow chain:
          #   2023-05-31T22:31:19.5945478Z tsibley/github-actions-testing-2/.github/workflows/caller.yaml@refs/heads/main (a5225beed10a5a002d143f469a591ac18797ae37)
          #   2023-05-31T22:31:19.5945587Z -> tsibley/github-actions-testing/.github/workflows/know-thyself.yaml@refs/heads/master (2320b96132da7d16c42253f52eb4dffe94017ff5)
          #   2023-05-31T22:31:19.5945680Z Waiting for a runner to pick up this job...
          #   â€¦
          #   2023-05-31T22:31:26.7184921Z Uses: tsibley/github-actions-testing/.github/workflows/know-thyself.yaml@refs/heads/master (2320b96132da7d16c42253f52eb4dffe94017ff5)
          #
          ref="$(grep -P '(?<=Job defined at: )\S+' --only-matching --max-count=1 "$job_logs")"
          sha="$(grep -P '(?<=\Q'"$ref"'\E [(])[0-9a-fA-F]{40}(?=[)])' --only-matching --max-count=1 "$job_logs")"

          # <https://docs.github.com/en/actions/using-workflows/reusing-workflows#calling-a-reusable-workflow>
          repository="${ref%%/.github/*}"

          echo "WORKFLOW_REF=$ref" | tee -a "$GITHUB_ENV"
          echo "WORKFLOW_SHA=$sha" | tee -a "$GITHUB_ENV"
          echo "WORKFLOW_REPOSITORY=$repo" | tee -a "$GITHUB_ENV"

    outputs:
      ref: ${{ env.WORKFLOW_REF }}
      sha: ${{ env.WORKFLOW_SHA }}
      repository: ${{ env.WORKFLOW_REPOSITORY }}

  example:
    needs:
      - workflow-context
    runs-on: ubuntu-latest
    steps:
      - run: tree -a

      - uses: actions/checkout@v3
        with:
          repository: ${{ needs.workflow-context.outputs.repository }}
          ref: ${{ needs.workflow-context.outputs.sha }}

      - run: tree -a
